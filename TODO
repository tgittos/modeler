TODO
====

No longer in order of importance!

Immediate
---------

- Replace sylvester.js and glUtils.js with mjs [done]
- Move translation and rotation functions from Cube into Face3 [done]
- Review and fix translation/rotation math once it's in Face3, perhaps make it chainable [done]
- Implement a Face3 vertex array to matrix function (for rotation and translation). Also consider 
  just storing vertices as a Matrix rather than an array. Length will be fixed -> Face3 = 3x3
  matrix, Face4 = 3x4 matrix. [done]
- Finish pyramid primitive [done]
- Create event framework so that code can be asynchronous - TODO: make loader event listeners expire
  [done]
- Implement a standard for app events [partially done]
- Create a general program structure with proper event handlers [done]
- Move shader code into material, preload all assets first [partially done]
- Shift rendering code into separate namespace [done], remove dependency of renderer to abstraction
  for speed! ********
- Add translation layer for writing abstraction out to arrays for the renderer *******
- Optimize with array interleaving method *******
- Consider switching to glmatrix (big task) ********
- Implement lighting (big task) ********
- http://imaging.robarts.ca/~dcantor/?p=200 - Point cloud rendering
- Create sphere primitive (procedural)
- Write a small utility for building primitives to files (manually, or using node.js)
- Expand utility to write entire scenes to files and then run through closure to create small, fast
  demos for use on sites, etc.
- Implement background asset loader, perhaps with WebWorkers
- Implement an asset manager to handle loading all of the files
- See if I can refactor out the global canvas that's attached to the global gl context
- Write more unit tests
- Move the inspect method off of each object and into a util
- Fix the dead load method on the shader loader so shaders can be stored as files. Include a simple
  file server, maybe Java, so you can run it on Chrome and it won't cack itself with AJAX requests. [done]
- Implement weldVertices method to cut down on geometry sent to GPU
- Add pyramid primitive and get demo file working again [done]
- Implement per face colouring for materials, maybe as low as per vertex [done? or not important]
- Continue on with learningwebgl.com lessons - current lesson is 7
- Create animations sync system where a procedurally animated scene can be compiled down to a 
  delcarative scene for super fast lightning running files

Future
------

- Implement render to texture
- Research software rasterization, implement canvas based renderer